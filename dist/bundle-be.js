!function(e){function r(e){var r=require("./"+e+"."+o+".hot-update.js");!function(e,r){if(!x[e]||!m[e])return;for(var t in m[e]=!1,r)Object.prototype.hasOwnProperty.call(r,t)&&(h[t]=r[t]);0==--v&&0===b&&j()}(r.id,r.modules)}var t,n=!0,o="65ebc0b4ced9e5d8b9aa",s={},i=[],c=[];function d(e){var r=D[e];if(!r)return E;var n=function(n){return r.hot.active?(D[n]?-1===D[n].parents.indexOf(e)&&D[n].parents.push(e):(i=[e],t=n),-1===r.children.indexOf(n)&&r.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),i=[]),E(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return E[e]},set:function(r){E[e]=r}}};for(var s in E)Object.prototype.hasOwnProperty.call(E,s)&&"e"!==s&&"t"!==s&&Object.defineProperty(n,s,o(s));return n.e=function(e){return"ready"===u&&p("prepare"),b++,E.e(e).then(r,function(e){throw r(),e});function r(){b--,"prepare"===u&&(w[e]||O(e),0===b&&0===v&&j())}},n.t=function(e,r){return 1&r&&(e=n(e)),E.t(e,-2&r)},n}function a(e){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==e,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},check:_,apply:P,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var r=l.indexOf(e);r>=0&&l.splice(r,1)},data:s[e]};return t=void 0,r}var l=[],u="idle";function p(e){u=e;for(var r=0;r<l.length;r++)l[r].call(null,e)}var f,h,y,v=0,b=0,w={},m={},x={};function g(e){return+e+""===e?+e:e}function _(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return n=e,p("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then(function(e){if(!e)return p("idle"),null;m={},w={},x=e.c,y=e.h,p("prepare");var r=new Promise(function(e,r){f={resolve:e,reject:r}});h={};return O(0),"prepare"===u&&0===b&&0===v&&j(),r})}function O(e){x[e]?(m[e]=!0,v++,r(e)):w[e]=!0}function j(){p("ready");var e=f;if(f=null,e)if(n)Promise.resolve().then(function(){return P(n)}).then(function(r){e.resolve(r)},function(r){e.reject(r)});else{var r=[];for(var t in h)Object.prototype.hasOwnProperty.call(h,t)&&r.push(g(t));e.resolve(r)}}function P(r){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var t,n,c,d,a;function l(e){for(var r=[e],t={},n=r.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),s=o.id,i=o.chain;if((d=D[s])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:s};if(d.hot._main)return{type:"unaccepted",chain:i,moduleId:s};for(var c=0;c<d.parents.length;c++){var a=d.parents[c],l=D[a];if(l){if(l.hot._declinedDependencies[s])return{type:"declined",chain:i.concat([a]),moduleId:s,parentId:a};-1===r.indexOf(a)&&(l.hot._acceptedDependencies[s]?(t[a]||(t[a]=[]),f(t[a],[s])):(delete t[a],r.push(a),n.push({chain:i.concat([a]),id:a})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function f(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}r=r||{};var v={},b=[],w={},m=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var _ in h)if(Object.prototype.hasOwnProperty.call(h,_)){var O;a=g(_);var j=!1,P=!1,A=!1,H="";switch((O=h[_]?l(a):{type:"disposed",moduleId:_}).chain&&(H="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":r.onDeclined&&r.onDeclined(O),r.ignoreDeclined||(j=new Error("Aborted because of self decline: "+O.moduleId+H));break;case"declined":r.onDeclined&&r.onDeclined(O),r.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+H));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(O),r.ignoreUnaccepted||(j=new Error("Aborted because "+a+" is not accepted"+H));break;case"accepted":r.onAccepted&&r.onAccepted(O),P=!0;break;case"disposed":r.onDisposed&&r.onDisposed(O),A=!0;break;default:throw new Error("Unexception type "+O.type)}if(j)return p("abort"),Promise.reject(j);if(P)for(a in w[a]=h[a],f(b,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,a)&&(v[a]||(v[a]=[]),f(v[a],O.outdatedDependencies[a]));A&&(f(b,[O.moduleId]),w[a]=m)}var I,k=[];for(n=0;n<b.length;n++)a=b[n],D[a]&&D[a].hot._selfAccepted&&k.push({module:a,errorHandler:D[a].hot._selfAccepted});p("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete installedChunks[e]}(e)});for(var q,S,M=b.slice();M.length>0;)if(a=M.pop(),d=D[a]){var C={},T=d.hot._disposeHandlers;for(c=0;c<T.length;c++)(t=T[c])(C);for(s[a]=C,d.hot.active=!1,delete D[a],delete v[a],c=0;c<d.children.length;c++){var U=D[d.children[c]];U&&((I=U.parents.indexOf(a))>=0&&U.parents.splice(I,1))}}for(a in v)if(Object.prototype.hasOwnProperty.call(v,a)&&(d=D[a]))for(S=v[a],c=0;c<S.length;c++)q=S[c],(I=d.children.indexOf(q))>=0&&d.children.splice(I,1);for(a in p("apply"),o=y,w)Object.prototype.hasOwnProperty.call(w,a)&&(e[a]=w[a]);var R=null;for(a in v)if(Object.prototype.hasOwnProperty.call(v,a)&&(d=D[a])){S=v[a];var $=[];for(n=0;n<S.length;n++)if(q=S[n],t=d.hot._acceptedDependencies[q]){if(-1!==$.indexOf(t))continue;$.push(t)}for(n=0;n<$.length;n++){t=$[n];try{t(S)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:a,dependencyId:S[n],error:e}),r.ignoreErrored||R||(R=e)}}}for(n=0;n<k.length;n++){var z=k[n];a=z.module,i=[a];try{E(a)}catch(e){if("function"==typeof z.errorHandler)try{z.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:a,error:t,originalError:e}),r.ignoreErrored||R||(R=t),R||(R=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:a,error:e}),r.ignoreErrored||R||(R=e)}}return R?(p("fail"),Promise.reject(R)):(p("idle"),new Promise(function(e){e(b)}))}var D={};function E(r){if(D[r])return D[r].exports;var t=D[r]={i:r,l:!1,exports:{},hot:a(r),parents:(c=i,i=[],c),children:[]};return e[r].call(t.exports,t,t.exports,d(r)),t.l=!0,t.exports}E.m=e,E.c=D,E.d=function(e,r,t){E.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},E.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},E.t=function(e,r){if(1&r&&(e=E(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(E.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)E.d(t,n,function(r){return e[r]}.bind(null,n));return t},E.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return E.d(r,"a",r),r},E.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},E.p="/Users/saifurrehman/Desktop/ICP-Airways/icp-backend/ai-microservice/dist",E.h=function(){return o},d(0)(E.s=0)}([function(e,r,t){t(1),e.exports=t(2)},function(e,r){e.exports=require("@babel/polyfill")},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(3),o=t(4),s=t(5);o("ts-express:server");const i=function(e){let r="string"==typeof e?parseInt(e,10):e;return isNaN(r)?e:r>=0&&r}(3011);s.default.set("port",i);const c=n.createServer(s.default);c.listen(i),c.on("error",function(e){if("listen"!==e.syscall)throw e;let r="string"==typeof i?"Pipe "+i:"Port "+i;switch(e.code){case"EACCES":console.error(`${r} requires elevated privileges`),process.exit(1);break;case"EADDRINUSE":console.error(`${r} is already in use`),process.exit(1);break;default:throw e}}),c.on("listening",function(){let e=c.address(),r="string"==typeof e?`pipe ${e}`:`port ${e.port}`;o(`Listening on ${r}`)})},function(e,r){e.exports=require("http")},function(e,r){e.exports=require("debug")},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=t(6),o=t(7),s=t(8),i=t(9),c=t(10),d=t(11),a=t(12);r.default=(new class{constructor(){this.jwtOptions={},this.ExtractJwt=c.ExtractJwt,this.JwtStrategy=c.ExtractJwt,this.express=n(),d.instrument(this.express),this.assistant=new a.AssistantV2({version:"2018-11-08",iam_apikey:"z7sGR_nRkuBWvYHMLKpdTGHy5F3hXWvw60UsZRlYPts5",url:"https://gateway-lon.watsonplatform.net/assistant/api"}),console.log(this.assistant),this.middleware(),this.routes()}middleware(){this.express.use(function(e,r,t){r.header("Access-Control-Allow-Origin","*"),r.header("Access-Control-Allow-Headers","X-Requested-With,content-type,Content-Type, Access-Control-Allow-Headers, Authorization"),r.header("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),t()}),this.express.use(o("dev")),this.express.use(s.json()),this.express.use(i.initialize()),this.express.use(s.urlencoded({extended:!1}))}routes(){let e=n.Router();e.post("/watson",(e,r,t)=>{this.assistant.message({assistant_id:"8f87912c-35a1-4b74-9914-6508430f56fa",session_id:e.body.session_id,input:{message_type:"text",text:e.body.text}},function(e,t){e?r.status(404).json({err:e}):r.status(200).json({response:t})})}),e.get("/healthz",(e,r,t)=>{r.send("success")}),e.get("/session",(e,r,t)=>{this.assistant.createSession({assistant_id:"8f87912c-35a1-4b74-9914-6508430f56fa"},function(e,t){e?(console.error(e),r.status(400).send(e)):r.status(200).send(t)})}),this.express.use("/",e)}}).express},function(e,r){e.exports=require("express")},function(e,r){e.exports=require("morgan")},function(e,r){e.exports=require("body-parser")},function(e,r){e.exports=require("passport")},function(e,r){e.exports=require("passport-jwt")},function(e,r){e.exports=require("epimetheus")},function(e,r){e.exports=require("watson-developer-cloud")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiQGJhYmVsL3BvbHlmaWxsXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiaHR0cFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImRlYnVnXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHByZXNzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9yZ2FuXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYm9keS1wYXJzZXJcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJwYXNzcG9ydFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcInBhc3Nwb3J0LWp3dFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImVwaW1ldGhldXNcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ3YXRzb24tZGV2ZWxvcGVyLWNsb3VkXCIiXSwibmFtZXMiOlsiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImNodW5rSWQiLCJjaHVuayIsInJlcXVpcmUiLCJob3RDdXJyZW50SGFzaCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImlkIiwibW9kdWxlcyIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwiaG90Q3JlYXRlUmVxdWlyZSIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJmbiIsInJlcXVlc3QiLCJob3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiaW5kZXhPZiIsInB1c2giLCJjaGlsZHJlbiIsImNvbnNvbGUiLCJ3YXJuIiwiT2JqZWN0RmFjdG9yeSIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImUiLCJob3RTdGF0dXMiLCJob3RTZXRTdGF0dXMiLCJ0aGVuIiwiZmluaXNoQ2h1bmtMb2FkaW5nIiwiZXJyIiwiaG90V2FpdGluZ0ZpbGVzTWFwIiwiaG90RW5zdXJlVXBkYXRlQ2h1bmsiLCJ0IiwibW9kZSIsImhvdENyZWF0ZU1vZHVsZSIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9tYWluIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIiwiZGVjbGluZSIsImRpc3Bvc2UiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiY2hlY2siLCJob3RDaGVjayIsImFwcGx5IiwiaG90QXBwbHkiLCJzdGF0dXMiLCJsIiwiaG90U3RhdHVzSGFuZGxlcnMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsImRhdGEiLCJuZXdTdGF0dXMiLCJob3REZWZlcnJlZCIsImhvdFVwZGF0ZU5ld0hhc2giLCJ0b01vZHVsZUlkIiwiRXJyb3IiLCJ1cGRhdGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsImhvdERvd25sb2FkTWFuaWZlc3QiLCJjIiwiaCIsInByb21pc2UiLCJyZWplY3QiLCJkZWZlcnJlZCIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwic2xpY2UiLCJtYXAiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBvcCIsInR5cGUiLCJwYXJlbnRJZCIsInBhcmVudCIsImNvbmNhdCIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImV4cG9ydHMiLCJtIiwiZCIsImdldHRlciIsIm8iLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsInMiLCJodHRwIiwiZGVidWciLCJBcHBfMSIsInBvcnQiLCJ2YWwiLCJwYXJzZUludCIsImlzTmFOIiwibm9ybWFsaXplUG9ydCIsImRlZmF1bHQiLCJzZXJ2ZXIiLCJjcmVhdGVTZXJ2ZXIiLCJsaXN0ZW4iLCJvbiIsInN5c2NhbGwiLCJjb2RlIiwicHJvY2VzcyIsImV4aXQiLCJhZGRyIiwiYWRkcmVzcyIsImV4cHJlc3MiLCJsb2dnZXIiLCJib2R5UGFyc2VyIiwicGFzc3BvcnQiLCJwYXNzcG9ydEpXVCIsImVwaW1ldGhldXMiLCJ3YXRzb24iLCJbb2JqZWN0IE9iamVjdF0iLCJ0aGlzIiwiand0T3B0aW9ucyIsIkV4dHJhY3RKd3QiLCJKd3RTdHJhdGVneSIsImluc3RydW1lbnQiLCJhc3Npc3RhbnQiLCJBc3Npc3RhbnRWMiIsInZlcnNpb24iLCJpYW1fYXBpa2V5IiwidXJsIiwibG9nIiwibWlkZGxld2FyZSIsInJvdXRlcyIsInVzZSIsInJlcSIsInJlcyIsIm5leHQiLCJoZWFkZXIiLCJqc29uIiwiaW5pdGlhbGl6ZSIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInJvdXRlciIsIlJvdXRlciIsInBvc3QiLCJtZXNzYWdlIiwiYXNzaXN0YW50X2lkIiwic2Vzc2lvbl9pZCIsImJvZHkiLCJpbnB1dCIsIm1lc3NhZ2VfdHlwZSIsInRleHQiLCJyZXNwb25zZSIsInNlbmQiLCJjcmVhdGVTZXNzaW9uIl0sIm1hcHBpbmdzIjoiYUFDQSxTQUFBQSxFQUFBQyxHQUNBLElBQUFDLEVBQUFDLFFBQUEsS0FBQUYsRUFBQSxJQUFBRyxFQUFBLG1CQTBPQSxTQUFBSCxFQUFBSSxHQUNBLElBQUFDLEVBQUFMLEtBQUFNLEVBQUFOLEdBQ0EsT0FFQSxRQUFBTyxLQURBRCxFQUFBTixJQUFBLEVBQ0FJLEVBQ0FJLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFQLEVBQUFHLEtBQ0FLLEVBQUFMLEdBQUFILEVBQUFHLElBR0EsS0FBQU0sR0FBQSxJQUFBQyxHQUNBQyxJQW5QQUMsQ0FBQWYsRUFBQWdCLEdBQUFoQixFQUFBaUIsU0FrQkEsSUFLQUMsRUFMQUMsR0FBQSxFQUVBakIsRUFBQSx1QkFFQWtCLEVBQUEsR0FHQUMsRUFBQSxHQUVBQyxFQUFBLEdBR0EsU0FBQUMsRUFBQWpCLEdBQ0EsSUFBQWtCLEVBQUFDLEVBQUFuQixHQUNBLElBQUFrQixF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bnRlbnQiOlsiIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIGNodW5rID0gcmVxdWlyZShcIi4vXCIgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCIpO1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVuay5pZCwgY2h1bmsubW9kdWxlcyk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdCgpIHtcbiBcdFx0dHJ5IHtcbiBcdFx0XHR2YXIgdXBkYXRlID0gcmVxdWlyZShcIi4vXCIgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIik7XG4gXHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gXHRcdH1cbiBcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh1cGRhdGUpO1xuIFx0fVxuXG4gXHQvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjY1ZWJjMGI0Y2VkOWU1ZDhiOWFhXCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHR9XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xuIFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xuIFx0XHRcdHtcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcbiBcdFx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcbiBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0ZGVmYXVsdDpcbiBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0FwcGx5KSB7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRcdFx0XHRpZiAoXG4gXHRcdFx0XHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcyxcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdFx0XHRcdClcbiBcdFx0XHRcdFx0XHQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG4gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdClcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdH1cblxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdH0pO1xuXG4gXHRcdHZhciBpZHg7XG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuIFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4gXHRcdFx0XHRjYihkYXRhKTtcbiBcdFx0XHR9XG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcblxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4gXHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuIFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm90IGluIFwiYXBwbHlcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4gXHRcdGZvciAobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG4gXHRcdHZhciBlcnJvciA9IG51bGw7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbiBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuIFx0XHRcdFx0XHRcdGlmIChjYikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGNiKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XG4gXHRcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcbiBcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4gXHRcdGlmIChlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1VzZXJzL3NhaWZ1cnJlaG1hbi9EZXNrdG9wL0lDUC1BaXJ3YXlzL2ljcC1iYWNrZW5kL2FpLW1pY3Jvc2VydmljZS9kaXN0XCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZSgwKShfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIkBiYWJlbC9wb2x5ZmlsbFwiKTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpO1xuY29uc3QgQXBwXzEgPSByZXF1aXJlKFwiLi9BcHBcIik7XG5kZWJ1ZygndHMtZXhwcmVzczpzZXJ2ZXInKTtcbmNvbnN0IHBvcnQgPSBub3JtYWxpemVQb3J0KDMwMTEpO1xuQXBwXzEuZGVmYXVsdC5zZXQoJ3BvcnQnLCBwb3J0KTtcbmNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKEFwcF8xLmRlZmF1bHQpO1xuc2VydmVyLmxpc3Rlbihwb3J0KTtcbnNlcnZlci5vbignZXJyb3InLCBvbkVycm9yKTtcbnNlcnZlci5vbignbGlzdGVuaW5nJywgb25MaXN0ZW5pbmcpO1xuZnVuY3Rpb24gbm9ybWFsaXplUG9ydCh2YWwpIHtcbiAgICBsZXQgcG9ydCA9ICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgPyBwYXJzZUludCh2YWwsIDEwKSA6IHZhbDtcbiAgICBpZiAoaXNOYU4ocG9ydCkpXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgZWxzZSBpZiAocG9ydCA+PSAwKVxuICAgICAgICByZXR1cm4gcG9ydDtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3Iuc3lzY2FsbCAhPT0gJ2xpc3RlbicpXG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIGxldCBiaW5kID0gKHR5cGVvZiBwb3J0ID09PSAnc3RyaW5nJykgPyAnUGlwZSAnICsgcG9ydCA6ICdQb3J0ICcgKyBwb3J0O1xuICAgIHN3aXRjaCAoZXJyb3IuY29kZSkge1xuICAgICAgICBjYXNlICdFQUNDRVMnOlxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgJHtiaW5kfSByZXF1aXJlcyBlbGV2YXRlZCBwcml2aWxlZ2VzYCk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRUFERFJJTlVTRSc6XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGAke2JpbmR9IGlzIGFscmVhZHkgaW4gdXNlYCk7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG9uTGlzdGVuaW5nKCkge1xuICAgIGxldCBhZGRyID0gc2VydmVyLmFkZHJlc3MoKTtcbiAgICBsZXQgYmluZCA9ICh0eXBlb2YgYWRkciA9PT0gJ3N0cmluZycpID8gYHBpcGUgJHthZGRyfWAgOiBgcG9ydCAke2FkZHIucG9ydH1gO1xuICAgIGRlYnVnKGBMaXN0ZW5pbmcgb24gJHtiaW5kfWApO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKTsiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTtcbmNvbnN0IGxvZ2dlciA9IHJlcXVpcmUoXCJtb3JnYW5cIik7XG5jb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZShcImJvZHktcGFyc2VyXCIpO1xuY29uc3QgcGFzc3BvcnQgPSByZXF1aXJlKFwicGFzc3BvcnRcIik7XG5jb25zdCBwYXNzcG9ydEpXVCA9IHJlcXVpcmUoXCJwYXNzcG9ydC1qd3RcIik7XG5jb25zdCBlcGltZXRoZXVzID0gcmVxdWlyZShcImVwaW1ldGhldXNcIik7XG5jb25zdCB3YXRzb24gPSByZXF1aXJlKFwid2F0c29uLWRldmVsb3Blci1jbG91ZFwiKTtcbmNsYXNzIEFwcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuand0T3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLkV4dHJhY3RKd3QgPSBwYXNzcG9ydEpXVC5FeHRyYWN0Snd0O1xuICAgICAgICB0aGlzLkp3dFN0cmF0ZWd5ID0gcGFzc3BvcnRKV1QuRXh0cmFjdEp3dDtcbiAgICAgICAgdGhpcy5leHByZXNzID0gZXhwcmVzcygpO1xuICAgICAgICBlcGltZXRoZXVzLmluc3RydW1lbnQodGhpcy5leHByZXNzKTtcbiAgICAgICAgdGhpcy5hc3Npc3RhbnQgPSBuZXcgd2F0c29uLkFzc2lzdGFudFYyKHtcbiAgICAgICAgICAgIHZlcnNpb246ICcyMDE4LTExLTA4JyxcbiAgICAgICAgICAgIGlhbV9hcGlrZXk6ICd6N3NHUl9uUmt1Qld2WUhNTEtwZFRHSHk1RjNoWFd2dzYwVXNaUmxZUHRzNScsXG4gICAgICAgICAgICB1cmw6ICdodHRwczovL2dhdGV3YXktbG9uLndhdHNvbnBsYXRmb3JtLm5ldC9hc3Npc3RhbnQvYXBpJ1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5hc3Npc3RhbnQpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmUoKTtcbiAgICAgICAgdGhpcy5yb3V0ZXMoKTtcbiAgICB9XG4gICAgbWlkZGxld2FyZSgpIHtcbiAgICAgICAgdGhpcy5leHByZXNzLnVzZShmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcbiAgICAgICAgICAgIHJlcy5oZWFkZXIoXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiwgXCIqXCIpO1xuICAgICAgICAgICAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnNcIiwgXCJYLVJlcXVlc3RlZC1XaXRoLGNvbnRlbnQtdHlwZSxDb250ZW50LVR5cGUsIEFjY2Vzcy1Db250cm9sLUFsbG93LUhlYWRlcnMsIEF1dGhvcml6YXRpb25cIik7XG4gICAgICAgICAgICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiLCBcIkdFVCwgUE9TVCwgT1BUSU9OUywgUFVULCBQQVRDSCwgREVMRVRFXCIpO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5leHByZXNzLnVzZShsb2dnZXIoJ2RldicpKTtcbiAgICAgICAgdGhpcy5leHByZXNzLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG4gICAgICAgIHRoaXMuZXhwcmVzcy51c2UocGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcbiAgICAgICAgdGhpcy5leHByZXNzLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogZmFsc2UgfSkpO1xuICAgIH1cbiAgICByb3V0ZXMoKSB7XG4gICAgICAgIGxldCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuICAgICAgICByb3V0ZXIucG9zdCgnL3dhdHNvbicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hc3Npc3RhbnQubWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgYXNzaXN0YW50X2lkOiAnOGY4NzkxMmMtMzVhMS00Yjc0LTk5MTQtNjUwODQzMGY1NmZhJyxcbiAgICAgICAgICAgICAgICBzZXNzaW9uX2lkOiByZXEuYm9keS5zZXNzaW9uX2lkLFxuICAgICAgICAgICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgICAgICAgICAgICdtZXNzYWdlX3R5cGUnOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgICd0ZXh0JzogcmVxLmJvZHkudGV4dFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnIgfSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IHJlc3BvbnNlIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByb3V0ZXIuZ2V0KCcvaGVhbHRoeicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgICAgICAgcmVzLnNlbmQoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJvdXRlci5nZXQoJy9zZXNzaW9uJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFzc2lzdGFudC5jcmVhdGVTZXNzaW9uKHtcbiAgICAgICAgICAgICAgICBhc3Npc3RhbnRfaWQ6ICc4Zjg3OTEyYy0zNWExLTRiNzQtOTkxNC02NTA4NDMwZjU2ZmEnLFxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDApLnNlbmQoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhwcmVzcy51c2UoJy8nLCByb3V0ZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IG5ldyBBcHAoKS5leHByZXNzO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXhwcmVzc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb3JnYW5cIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYm9keS1wYXJzZXJcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGFzc3BvcnRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGFzc3BvcnQtand0XCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImVwaW1ldGhldXNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwid2F0c29uLWRldmVsb3Blci1jbG91ZFwiKTsiXSwic291cmNlUm9vdCI6IiJ9